services:
  frontend:
    build: 
      context: ./frontend
      network: host
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_SHOW_LANDING_PAGE: ${NEXT_PUBLIC_SHOW_LANDING_PAGE}
    ports:
      - "${FRONTEND_PORT}:3000"
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_SHOW_LANDING_PAGE=${NEXT_PUBLIC_SHOW_LANDING_PAGE}


  backend:
    build:
      context: ./backend
      network: host
    ports:
      - "${BACKEND_PORT}:8000"
    depends_on:
      db:
        condition: service_healthy

    environment:
      - DB_STRING=${DB_STRING}
      - ALEMBIC_DB_URL=${ALEMBIC_DB_URL}
      - DEBUG=${DEBUG}
      - EMAIL_APP_PASSWORD=${EMAIL_APP_PASSWORD}
      - APP_EMAIL_ADDRESS=${APP_EMAIL_ADDRESS}
      - EMAIL_TEMPLATES_PATH=${EMAIL_TEMPLATES_PATH}
      - ALLOW_ADMINS_ONLY=${ALLOW_ADMINS_ONLY}
      - ADMIN_EMAILS=${ADMIN_EMAILS}
      - SUPER_ADMIN_EMAILS=${SUPER_ADMIN_EMAILS}
      - FRONTEND_URL=${FRONTEND_URL}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
  db:
    image: postgres:17
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DB=${PG_DATABASE}

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbadmin -d yourdb"]
      interval: 10s
      timeout: 5s
      retries: 5

    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
